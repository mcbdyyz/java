public interface List<E> extends Collection<E> {
        Iterator<E> iterator();
        boolean add(E e);
}
public abstract class AbstractList<E>{
        protected int modCount = 0;
}

public class ArrayList<E> extends AbstractList<E> implements List<E>{
        public boolean add(E e) {todo 在add方法中会有一个modCount也就是实际修改集合的次数++,
                modCount++;
                add(e, elementData, size);
                return true;
            }
        public Iterator<E> iterator() {
                return new Itr();
            }
        private class Itr implements Iterator<E> {
                int expectedModCount = modCount;
                /*
                    modCount:实际修改集合的次数
                    expectedModCount:预期修改集合的次数
                */
                public E next() {
                    checkForComodification();  todo //next()方法每次都会调用下面的方法，来进行一个判断，来保证遍历的次数
                    int i = cursor;
                    if (i >= size)
                        throw new NoSuchElementException();
                    Object[] elementData = ArrayList.this.elementData;
                    if (i >= elementData.length)
                        throw new ConcurrentModificationException();
                    cursor = i + 1;
                    return (E) elementData[lastRet = i];
                }


                final void checkForComodification() {
                    if (modCount != expectedModCount) todo 如果它们不相等就抛出下面的那个异常
                        throw new ConcurrentModificationException();
                }
            }
}